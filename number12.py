"""


The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over
five hundred divisors?

"""
#declaring an upper bound
UPPER_BOUND = 2000
#creating the list of the triangle numbers from 1 to the upper bound
triangle_numbers = [(n * (n+1))/ 2 for n in range(1000, UPPER_BOUND + 1)]

#creating the list of potential divisors of the triangle numbers
# which are all the integers from 1 to the largest triangle number in our list
#divided by two, called the max_divisor
#so if a triangle number > max_divisor, the triangle number itself will not be
#included among its own divisors.

max_divisor = triangle_numbers[len(triangle_numbers)-1]/2
divisors = [n for n in range(1, max_divisor + 1)]

divisor_counter = {n : 0  for n in triangle_numbers}


#creating a function that can be used within the 'map' function. It will
#check for divisibility by n
def modder(x):
    return lambda n: 1 if x %n == 0 else 0

#creating a matrix whose ith row contains the ith triangle number mod each
#divisor in the divisor list

#initalizing the matrix, each -1 will later become a list (a row) corresponding
#to a triangle number, and the entries in the list will be corresponding to
#the triangle number mod a divisor, 
matrix = [-1 for x in triangle_numbers]




#creating the rows of the matrix.
for i in range(len(triangle_numbers)):
    f = modder(triangle_numbers[i])
    matrix[i] = map(f, divisors)
    temp = sum(matrix[i])
    divisor_counter[triangle_numbers[i]] = temp if triangle_numbers[i]\
    <= max_divisor else temp+1
    


    
#GETTING A MEMORY ERROR FOR UPPER_BOUND>=2000        

#print mod_by_divisors
    
#for n in triangle_numbers:
#for d in divisors:
