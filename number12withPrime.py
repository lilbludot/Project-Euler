"""


The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over
five hundred divisors?

"""
from math import sqrt
import pickle

#loading the factor base
#for primes up to 6000000, the size is 412849
infile = open("PrimesTo112PlusMillion.py", "r+")  
factor_base = pickle.load(infile)
size = len(factor_base)

#declaring an upper bound and an upper limit
UPPER_BOUND = 15000
#UPPER_LIMIT = UPPER_BOUND *(UPPER_BOUND + 1)/2

#creating the list of the triangle numbers from 1 to the upper bound
triangle_numbers = [(n * (n+1))/ 2 for n in range(10000, UPPER_BOUND + 1)]
#print triangle_numbers
#print len(triangle_numbers)
divisor_counter = {n : 0  for n in triangle_numbers}






#creating a function that can be used within the 'map' function. It will
#check for divisibility by n
def modder(x):
    return lambda n: 1 if x %n == 0 else 0

#creating a matrix whose ith row contains the ith triangle number mod each
#divisor in the divisor list

#initalizing the matrix, each -1 will later become a list (a row) corresponding
#to a triangle number, and the entries in the list will be corresponding to
#the triangle number mod a divisor, 
matrix = [-1 for x in triangle_numbers]

#breaking up the factor base into manageable size:

#The factor base will be divided into sublists of size 50,000.
#chunks = # of these sublists
chunks = size/50000 + 1

#The sublists of size 50,000 or less are called 'base[i]'
base = [0 for k in range(chunks)]
for k in range(chunks -1):
    print "chunk #: ", k
    base[k] = factor_base[k*50000 : (k+1)*50000]
base[chunks - 1] = factor_base[(chunks - 1)* 50000 : ]
    
#suspect list will contain the triangle numbers that might have
#over 500 divisors
suspect_list = []

#counter[i] = # of primes that divide into triangle_numbers[i]
counter = [0 for k in triangle_numbers]
print "Starting modding by the p's "
#creating the rows of the matrix.
for i in range(len(triangle_numbers)):
    
    for k in range(chunks):
        
        f = modder(triangle_numbers[i])
        matrix[k] = map(f, base[k])
        counter[i]+= sum(matrix[k])
    if counter[i] >= 7 :
    #print "The", i, "-th triangle number,", triangle_numbers[i],\
    # "has", temp, "distinct prime divisors"
        suspect_list.append(triangle_numbers[i])
    divisor_counter[triangle_numbers[i]] = counter[i]    

print "Starting in on the suspect list."
for n in suspect_list:
    #Trial division of N by primes in the factor base. Saving the primes that
    #evenly divide into N into the list called 'divisors'
    m = n
    divisors = []
    for k in range(chunks):
        for p in base[k]:
            if m % p == 0:
                divisors.append(p)
                m = m / p
        
    #m is what is left after the primes from the factor base were divided out of N
    # if m is not equal to 1, higher powers of primes divided into m or m is a prime

    print "n: ", n, "m: ", m, "number of p: ", \
          divisor_counter[n], "divisors: ", divisors 

infile.close()
    
